#!/usr/bin/ruby

# Solution to Project Euler problem 12
# By Trey Thomas
#
# | The sequence of triangle numbers is generated by adding the natural numbers.
# | So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
# | first ten terms would be:
# |
# | 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# |
# | Let us list the factors of the first seven triangle numbers:
# |
# |  1: 1
# |  3: 1,3
# |  6: 1,2,3,6
# | 10: 1,2,5,10
# | 15: 1,3,5,15
# | 21: 1,3,7,21
# | 28: 1,2,4,7,14,28
# |
# | We can see that 28 is the first triangle number to have over five divisors.
# |
# | What is the value of the first triangle number to have over five hundred
# | divisors?
#
#

require 'set'
require 'prime'


class TriangleNumbers
  attr_reader :current

  def initialize
    @current = 1
    @increment = 1
  end

  def next
    @increment += 1
    @current += @increment
  end
end


class Integer
  def divisors
    # Generate array of prime factors (including repeats)
    prime_factorization = []
    self.prime_division.each do |f| 
      prime_factorization += [f[0]] * f[1]
    end
    
    divisors = [1].to_set
    
    # Add each possible combination of factors multiplied together
    (1..prime_factorization.size).each do |count| 
      prime_factorization.combination(count).each do |combo|
        divisors << combo.reduce(:*)
      end
    end

    return divisors
  end
end


gen = TriangleNumbers.new

gen.next until gen.current.divisors.size > 500

puts gen.current

